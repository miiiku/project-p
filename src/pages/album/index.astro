---
import Layout from "../../layouts/Layout.astro";
---


<Layout>
  <div class="flex gap-4 justify-center p-4">
    <button id="run">run</button>
    <button id="download">downlaod maps</button>
  </div>
  <div class="w-[80vw] h-[70vh] p-6 mx-auto rounded bg-stone-400 overflow-y-auto">
    <pre id="output-map"></pre>
    <hr>
    <pre id="output-text"></pre>
  </div>
</Layout>

<script>
  import { get, gpsCoordinateConverter } from '../../utils/index'
   
  const datas: any[] = [
    "https://qn.sukoshi.xyz/project-p/photos/IMG_2474.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4359.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4398.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4413.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4432.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4556.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4568.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4598.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4624.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4646.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4662.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4663.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4752.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4772.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4790.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4800.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4869.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4871.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4894.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4901.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4906.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4913.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4920.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4922.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4924.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4939.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_5032.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_5601.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_5603.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_6156.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_6199.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_6279.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_6356.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/cd40f146011824dc7d55870d8b56f281.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/d06f0d326073e712494ff2104a92ddbf.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/ffda33addc0cb8d90907ae3689c7b174.jpeg",
  ];

  const amapKey = "";

  let dataResult: any[] = [];
  let dataMaps: [string, string][] = [];

  function sleep (time = 800) {
    return new Promise((resolve) => {
      setTimeout(() => resolve(true), time);
    })
  }

  function fetchThumbData (src: string) {
    return new Promise(async (resolve) => {
      const response = await fetch(`${src}-8bmp`);
      const data = await response.blob();
      if (data) {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.readAsDataURL(data);
      }
    })
  }

  async function fetchColor (src: string) {
    const response = await fetch(`${src}?imageAve`);
    const jsonData = await response.json();
    return jsonData?.RGB?.replace('0x', '#');
  }

  async function fetchExif (src: string) {
    const response = await fetch(`${src}?exif`);
    const exif =  await response.json();

    const vaildFields = [
      'GPSLatitude',
      'GPSLatitudeRef',
      'GPSLongitude',
      'GPSLongitudeRef',
      'Make',
      'Model',
      'FocalLength',
      'FNumber',
      'ExposureTime',
      'ISOSpeedRatings',
      'DateTime'
    ];
    const result: Record<string, any> = {};

    vaildFields.forEach((field: string) => {
      if (Reflect.has(exif, field)) {
        result[field] = exif[field]?.val;
      }
    })

    return Object.keys(result).length ? result : null;
  }

  async function fetchLocationInfo (longitude: string, latitude: string) {
    const converLongitude = gpsCoordinateConverter(longitude);
    const converLatitude = gpsCoordinateConverter(latitude);
    const response = await fetch(`https://restapi.amap.com/v3/geocode/regeo?location=${converLongitude},${converLatitude}&roadlevel=1&output=json&key=${amapKey}`);
    const locationInfo = await response.json();

    if (!locationInfo || locationInfo.status !== '1' || !locationInfo.regeocode) return null;

    const vaildFields = [
      ['formatted_address', 'formatted_address'],
      ['addressComponent.adcode', 'adcode'],
      ['addressComponent.city', 'city'],
      ['addressComponent.citycode', 'citycode'],
      ['addressComponent.country', 'country'],
      ['addressComponent.district', 'district'],
      ['addressComponent.province', 'province'],
      ['addressComponent.towncode', 'towncode'],
      ['addressComponent.township', 'township'],
      ['addressComponent.streetNumber.street', 'streetName'],
      ['addressComponent.streetNumber.number', 'streetNumber'],
    ];

    const result: Record<string, any> = {};

    vaildFields.forEach(([_get, _set]) => {
      result[_set] = get(locationInfo.regeocode, _get);
    })

    return Object.keys(result).length ? result : null;
  }

  async function fetchLocationMap (longitude: string, latitude: string) {
    const converLongitude = gpsCoordinateConverter(longitude);
    const converLatitude = gpsCoordinateConverter(latitude);
    // const response = await fetch(`https://restapi.amap.com/v3/staticmap?location=${converLongitude},${converLatitude}&zoom=10&size=750*300&markers=mid,,A:100.147033,25.744589&key=${amapKey}`);
    // return await response.blob()
    return `https://restapi.amap.com/v3/staticmap?location=${converLongitude},${converLatitude}&zoom=10&size=500*200&markers=mid,,A:${converLongitude},${converLatitude}&key=${amapKey}`
  }

  async function download () {
    if (!dataMaps?.length) return console.log('没有可下载的数据！');

    for (let i = 0; i < dataMaps.length; i++) {
      const [_name, _url] = dataMaps[i];
      const response = await fetch(_url);
      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.target = "_blank";
      a.download = _name;
      a.click();
      URL.revokeObjectURL(url);
      await sleep();
    }
  }

  function run () {
    const outputMap = document.querySelector('#output-map');
    const outputText = document.querySelector('#output-text');

    if (!outputMap || !outputText) return;

    outputMap.textContent = "";
    outputText.textContent = "";

    dataResult = [];
    dataMaps = [];

    let count = datas.length

    datas.forEach((item) => {
      (async function (photo: string) {
        const result:Record<string, any> = {
          name: photo.split('/').pop()?.split('.')?.[0],
          src: photo,
        };

        result.color = await fetchColor(photo);
        result.exif = await fetchExif(photo);
        result.thumb_img = await fetchThumbData(photo);

        const longitude = result.exif?.GPSLongitude;
        const latitude = result.exif?.GPSLatitude;
        if (longitude && latitude) {
          const suffix = photo.split('/').pop()?.split('.')?.pop() || '';
          const mappath = photo.replace('/photos/', '/maps/').replace(suffix, 'png');
          result.location_map = mappath;
          result.location_info = await fetchLocationInfo(longitude, latitude);
          const location_map_url = await fetchLocationMap(longitude, latitude);
          if (location_map_url) dataMaps.push([result.name, location_map_url]);
        }

        dataResult.push(result);

        count--;

        if (count <=0) {
          outputMap.textContent = JSON.stringify(dataMaps, null, 2);
          outputText.textContent = JSON.stringify(dataResult, null, 2);
        }
      })(item);
    });
  }

  document.querySelector("#run")?.addEventListener('click', run);
  document.querySelector("#download")?.addEventListener('click', download);
</script>
