---
import Layout from "../../layouts/Layout.astro";
---


<Layout>
  <button id="run">run</button>
  <div class="w-[80vw] h-[70vh] p-6 mx-auto rounded bg-stone-400 overflow-y-auto">
    <pre id="output"></pre>
  </div>
</Layout>

<script>
  import { gpsCoordinateConverter } from '../../utils/index'
  
  const datas: any[] = [
    "https://qn.sukoshi.xyz/project-p/photos/IMG_6356.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4939.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4924.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4922.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4920.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4913.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4906.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4901.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4894.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4871.jpeg",
    "https://qn.sukoshi.xyz/project-p/photos/IMG_4869.jpeg",
  ];

  const amapKey = "";

  function fetchThumbData (src: string) {
    return new Promise(async (resolve) => {
      const response = await fetch(`${src}-8bmp`);
      const data = await response.blob();
      if (data) {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.readAsDataURL(data);
      }
    })
  }

  async function fetchColor (src: string) {
    const response = await fetch(`${src}?imageAve`);
    const jsonData = await response.json();
    return jsonData?.RGB?.replace('0x', '#');
  }

  async function fetchExif (src: string) {
    const response = await fetch(`${src}?exif`);
    const exif =  await response.json();
    const vaildFields = ['GPSLatitude', 'GPSLongitude', 'Make', 'Model', 'FocalLength', 'FNumber', 'ExposureTime', 'ISOSpeedRatings'];
    if (exif && vaildFields.some((field: string) => Reflect.has(exif, field))) {
      return exif;
    }
    return null;
  }

  async function fetchLocationInfo (longitude: string, latitude: string) {
    const converLongitude = gpsCoordinateConverter(longitude);
    const converLatitude = gpsCoordinateConverter(latitude);
    const response = await fetch(`https://restapi.amap.com/v3/geocode/regeo?location=${converLongitude},${converLatitude}&roadlevel=1&output=json&key=${amapKey}`);
    return await response.json();
  }

  async function fetchLocationMap (longitude: string, latitude: string) {
    const converLongitude = gpsCoordinateConverter(longitude);
    const converLatitude = gpsCoordinateConverter(latitude);
    // const response = await fetch(`https://restapi.amap.com/v3/staticmap?location=${converLongitude},${converLatitude}&zoom=10&size=750*300&markers=mid,,A:100.147033,25.744589&key=${amapKey}`);
    // return await response.blob()
    return `https://restapi.amap.com/v3/staticmap?location=${converLongitude},${converLatitude}&zoom=10&size=500*200&markers=mid,,A:${converLongitude},${converLatitude}&key=${amapKey}`
  }

  function run () {
    const output = document.querySelector('#output');
    if (!output) return;

    datas.forEach((item) => {
      (async function (photo: string) {
        const result:Record<string, any> = {
          name: photo.split('/').pop()?.split('.')?.[0],
          src: photo,
        };

        result.color = await fetchColor(photo);
        result.exif = await fetchExif(photo);
        result.thumb_img = await fetchThumbData(photo);

        const longitude = result.exif?.GPSLongitude;
        const latitude = result.exif?.GPSLatitude;
        if (longitude && latitude) {
          const suffix = photo.split('/').pop()?.split('.')?.pop() || '';
          const mappath = photo.replace('/photos/', '/maps/').replace(suffix, 'png');
          result.location_map = mappath;

          const location_info_data = await fetchLocationInfo(longitude.val, latitude.val);
          if (location_info_data && location_info_data.status === "1") {
            result.location_info = location_info_data.regeocode;
          }

          const location_map_url = await fetchLocationMap(longitude.val, latitude.val);
          if (location_map_url) {
            const img = document.createElement('img');
            img.src = location_map_url;
            output.appendChild(img);
          }
        }

        const p = document.createElement('p');
        p.textContent = JSON.stringify(result, null, 2) + '\n';
        output.appendChild(p);

        console.log(result);
      })(item);
    });
  }

  document.querySelector("#run")?.addEventListener('click', run);
</script>
