---
import Layout from "../../layouts/Layout.astro";
---

<Layout>
    <div class="pt-6 size-full ">
      <div class="size-full rounded overflow-clip bg-stone-800/5 dark:bg-stone-100/5">
        <img
          id="main-image"
          class="block h-[80vh] mx-auto object-cover"
        />
      </div>
    </div>
  <div class="fixed inset-x-0 bottom-8 grid grid-cols-[1fr_minmax(0,800px)_1fr]">
    <div class="col-start-2 col-end-3 px-3 mx-auto rounded bg-stone-800/5 dark:bg-stone-100/5">
      <ul class="scrollbar">
        <span class="absolute z-10 inset-0 w-1 h-8/10 m-auto bg-cyan-300"></span>
      </ul>
    </div>
  </div>

</Layout>

<script>
  type ScrollState ={
    midX: number;
    activeIndex: number;
    blockSize: number;
    blockGap: number;
    scrollX: number;
    mainRef: HTMLImageElement | null;
    scrollRef: HTMLUListElement | null;
    blockRefs: NodeListOf<HTMLLIElement> | null;
    albums: any[] | null;
  }

  const s: ScrollState = {
    midX: 0,
    activeIndex: 0,
    blockSize: 64,
    blockGap: 12,
    scrollX: 0,
    mainRef: null,
    scrollRef: null,
    blockRefs: null,
    albums: null,
  }

  const handleScroll = scrollThrottle((e: WheelEvent) => {
    const blockCount = s.blockRefs?.length || 0;

    if (e.deltaY > 0) s.activeIndex += 1;
    if (e.deltaY < 0) s.activeIndex -= 1;

    s.activeIndex = Math.max(0, Math.min(s.activeIndex, blockCount - 1));

    updateScrollX();
    update();
  })

  function scrollThrottle (fn: (e: WheelEvent) => void, delay = 100) {
    let lastCallTime = 0;
    return (e: WheelEvent) => {
      const now = Date.now();
      if (now - lastCallTime < delay) {
        return;
      }
      lastCallTime = now;
      fn(e);
    };
  }

  function updateScrollX() {
    const blockCount = s.blockRefs?.length || 0;
    const clientWidth = s.scrollRef?.clientWidth || 0;
    const scrollWidth = (s.blockSize + s.blockGap) * blockCount + s.blockGap;
    const activeOffset = (s.blockSize + s.blockGap) * s.activeIndex + s.blockGap + s.blockSize / 2;
    const x = activeOffset - s.midX;
    s.scrollX = Math.max(0, Math.min(x, scrollWidth - clientWidth));
  }

  function update() {
    const { activeIndex, blockRefs, blockSize, blockGap, scrollX } = s;
    if (s.mainRef) {
      s.mainRef.src = s.albums?.[activeIndex]?.cover || '';
    }
    if (blockRefs && blockRefs.length) {
      blockRefs.forEach((item, index) => {
        item.style.transform = `
          translate3d(${
            index * (blockSize + blockGap) + blockGap - scrollX
          }px, 0, 0)
          scale(${activeIndex === index ? 1.26 : 1})
        `
      })
    }
  }

  function init() {
    s.mainRef = document.querySelector('#main-image');
    s.scrollRef = document.querySelector('.scrollbar');
    
    if (s.albums && s.albums.length) {
      const fragment = document.createDocumentFragment();
      s.albums.forEach((album: any) => {
        const item = document.createElement('li');
        item.classList.add('scrollbar-item');
        item.innerHTML = `
          <img class="block size-full object-cover" src="${album.clip}" alt="${album.name}">
        `;
        fragment.appendChild(item);
      });
      s.scrollRef?.appendChild(fragment);
    }

    s.blockRefs = document.querySelectorAll('.scrollbar .scrollbar-item');
    s.midX = (s.scrollRef?.clientWidth || 0) / 2;
  }

  async function fetchData() {
    const response = await fetch("https://qn.sukoshi.xyz/project-p/albums.json");
    const data = await response.json();

    s.albums = data.map((album: any) => {
      if (!album.cover.includes('unsplash')) {
        const format = '_384_N.webp?method=shortest&qst=6&quality=15';
        const list = album.cover.split('.');
        list.pop();
        const cover = `${list.join('.')}${format}`;
        album.clip = cover;
      } else {
        album.clip = album.cover;
      }

      return album;
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    await fetchData();
    init();
    update();

    const root = document.querySelector('#app') as HTMLDivElement;

    if (!root) return;

    root.addEventListener('wheel', (e: WheelEvent) => {
      if (Math.abs(e.deltaY) < 3) return;
      handleScroll(e);
    })
  });
</script>
