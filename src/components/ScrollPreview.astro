---
interface Props {
  wrapper: string;
  item: string;
}

const { wrapper, item } = Astro.props;
---

<scroll-preview popover="manual" data-wrapper={wrapper} data-item={item}></scroll-preview>

<script>

  class ScrollPreview extends HTMLElement {
    constructor() {
      super();

      this.shadowRoot = this.attachShadow({ mode: 'open' });
      
      this._initStyle();

      const {
        previewPopover,
        previewWrapper,
        showImage,
        scrollbar,
      } = this._initDomTree();
      
      this.previewPopover = previewPopover;
      this.previewWrapper = previewWrapper;
      this.showImage = showImage;
      this.scrollbar = scrollbar;

      this._initPhotos();

      this.handleKeyUpSelf = this.handleKeyUp.bind(this);
      this.handleScrollSelf = this.handleScroll.bind(this);
      this.handleScrollingSelf = this.handleScrolling.bind(this);
      this.throttleScroll = this._throttle(this.handleScrollingSelf);
    }

    _initStyle() {
      const sheet = new CSSStyleSheet();

      sheet.replaceSync(`
        .preview-wrapper {
          position: fixed;
          inset: 0;
          display: grid;
          grid-template-columns: 1fr 500px;
          background-color: white;
          transition: color 0.3s ease-in-out;
        }
        .preview-image {
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        .preview-image .show-image {
          display: block;
          max-width: 100%;
          max-height: 100%;
          margin: auto;
          object-fit: cover;
        }
        .preview-info {
          background-color: white;
        }
        .scrollbar-wrapper {
          position: fixed;
          inset-block: 0;
          right: 0;
        }
        .scrollbar {
          list-style: none;
          margin: 0;
          padding: 0;
          position: relative;
          width: 88px;
          height: 100%;
          overflow-y: clip;
          background-color: color-mix(in oklab, var(--color-stone-800) 5%, transparent);
        }
        .scrollbar-item {
          position: absolute;
          inset-inline: 0;
          margin-inline: auto;
          display: block;
          width: 64px;
          height: 64px;
          cursor: pointer;
          border-radius: 4px;
          transform-origin: right;
          transition: transform 0.3s ease-in-out;
          overflow: hidden;
        }
        .scrollbar-img {
          display: block;
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      `);

      this.shadowRoot?.adoptedStyleSheets.push(sheet);
    }

    _initDomTree() {
      const template = `
        <div class="scroll-preview">
          <div class="preview-wrapper">
            <div class="preview-image">
              <img class="show-image" />
            </div>
            <div class="preview-info">
              <div class="preview-title"></div>
              <div class="preview-color"></div>
            </div>
          </div>
          <div class="scrollbar-wrapper">
            <ul class="scrollbar"></ul>
          </div>
        </div>
      `;
      const templateElement = document.createElement('template');
      templateElement.innerHTML = template;
      
      const content = templateElement.content;

      const previewPopover = content.querySelector('.scroll-preview') as HTMLDivElement;
      const previewWrapper = content.querySelector('.preview-wrapper') as HTMLDivElement;
      const showImage = content.querySelector('.preview-image img') as HTMLImageElement;
      const scrollbar = content.querySelector('.scrollbar') as HTMLUListElement;

      this.shadowRoot.appendChild(content);

      return {
        previewPopover,
        previewWrapper,
        showImage,
        scrollbar,
      }
    }

    _initPhotos() {
      const wrapper = this.dataset.wrapper;
      const item = this.dataset.item;
      const serviceTarget = document.querySelector(`.${wrapper}`) as HTMLElement;
      const serviceTargetItems = serviceTarget?.querySelectorAll(`.${item}`) as NodeListOf<HTMLElement>;

      this.serviceTarget = serviceTarget;
      this.serviceTargetItems = serviceTargetItems;
      this.photos = Array.from(serviceTargetItems || []).map((photo) => {
        const p: ThumbPhoto = {
          name: photo.getAttribute('title') || '',
          src: photo.dataset.src || '',
          color: photo.dataset.color || '',
          clip: photo.dataset.clip || '',
          index: Number(photo.dataset.index),
        };

        this._createThumbPhoto(p);

        return p;
      });
    }

    _createThumbPhoto(photo: Photo) {
      const li = document.createElement('li');
      li.classList.add('scrollbar-item');

      const img = document.createElement('img');
      img.classList.add('scrollbar-img');
      img.src = photo.clip || photo.src;
      img.alt = photo.name;

      li.appendChild(img);
      this.photoEls.push(li);
      this.scrollbar.appendChild(li);
    }
    
    popoverOpen: boolean = false;
    shadowRoot: ShadowRoot;
    photos: ThumbPhoto[] = [];
    photoEls: HTMLLIElement[] = [];
    serviceTarget: HTMLElement | undefined;
    serviceTargetItems: NodeListOf<HTMLElement> | undefined;
    previewPopover: HTMLElement;
    previewWrapper: HTMLElement;
    showImage: HTMLImageElement;
    scrollbar: HTMLUListElement;
    
    resizeObserver: ResizeObserver | undefined;
    
    activeIndex: number = 0;
    blockSize: number = 64;
    blockGap: number = 12;
    scrollY: number = 0;

    handleKeyUpSelf: (e: KeyboardEvent) => void;
    handleScrollSelf: (e: WheelEvent) => void;
    handleScrollingSelf: (e: WheelEvent) => void;
    throttleScroll: (e: WheelEvent) => void;

    _getTarget(el: HTMLElement, cb: (target: HTMLElement) => boolean): HTMLElement | null {
      if (cb(el)) return el;

      if (el.parentElement) {
        return this._getTarget(el.parentElement, cb);
      }

      return null;
    }

    _throttle (fn: (e: WheelEvent) => void, delay = 100) {
      let lastCallTime = 0;
      return (e: WheelEvent) => {
        const now = Date.now();
        if (now - lastCallTime < delay) {
          return;
        }
        lastCallTime = now;
        fn(e);
      };
    }

    updateScrollY() {
      const { photos, blockSize, blockGap, activeIndex, scrollbar } = this;
      const photoCount = photos.length;
      const clientHeight = scrollbar.clientHeight || 0;
      const scrollHeight = (blockSize + blockGap) * photoCount + blockGap;

      if (scrollHeight <= clientHeight) {
        const offset = (clientHeight - scrollHeight) / 2;
        this.scrollY = -offset;
      } else {
        const activeOffset = (blockSize + blockGap) * activeIndex + blockGap + blockSize / 2;
        const y = activeOffset - clientHeight / 2;
        this.scrollY = Math.max(0, Math.min(y, scrollHeight - clientHeight));
      }
    }

    update() {
      const { activeIndex, photos, blockSize, blockGap, scrollY, photoEls } = this;
      
      if (!photos) return;
      
      const activePhoto = photos[activeIndex];
      
      if (!activePhoto) return;

      this.showImage.src = activePhoto.src;
      this.showImage.alt = activePhoto.name;
      this.previewWrapper.style.backgroundColor = activePhoto.color || '#ffffff';

      photoEls.forEach((item, index) => {
        item.style.transform = `
          translate3d(0, ${index * (blockSize + blockGap) + blockGap - scrollY}px, 0)
          scale(${activeIndex === index ? 1.26 : 1})
        `;
      })
    }

    handleScrolling(e: WheelEvent) {
      const photoCount = this.photos.length;

      if (e.deltaY > 0) this.activeIndex += 1;
      if (e.deltaY < 0) this.activeIndex -= 1;

      this.activeIndex = Math.max(0, Math.min(this.activeIndex, photoCount - 1));

      this.updateScrollY();
      this.update();
    }

    handleScroll(e: WheelEvent) {
      if (!this.popoverOpen) return;
      if (Math.abs(e.deltaY) < 3) return;
      this.throttleScroll(e);
    }

    handleKeyUp(e: KeyboardEvent) {
      if (!this.popoverOpen) return;

      if (e.key === 'Escape') {
        this.hide();
      }

      if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
        this.activeIndex = Math.max(0, this.activeIndex - 1);
        this.updateScrollY();
        this.update();
      }

      if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
        this.activeIndex = Math.min(this.photos.length - 1, this.activeIndex + 1);
        this.updateScrollY();
        this.update();
      }
    }

    show (index?: number) {
      this.showPopover();
      /** 更新下标 */
      if (index !== undefined) {
        this.activeIndex = index;
        this.updateScrollY();
        this.update();
      }
    }

    hide () {
      this.hidePopover();
      const { activeIndex, photos, serviceTargetItems } = this;
      const activePhoto = photos[activeIndex];

      if (activePhoto && activePhoto.index) {
        const dataIndex = activePhoto.index;
        const targetItem = serviceTargetItems?.[dataIndex];
        if (targetItem) {
          const { top, height } = targetItem?.getBoundingClientRect() || {};
          const vh = window.innerHeight;
          if (top > vh - height || top < 0) {
            targetItem.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }
      }
    }

    connectedCallback () {
      /** 事件委托 */
      if (this.serviceTarget) {
        this.serviceTarget.addEventListener('mousedown', (e) => {
          const itemClassName = this.dataset.item || '';
          const target = e.target as HTMLElement;
          const targetItem = this._getTarget(target, (el) => el.classList.contains(itemClassName));
          if (!targetItem) return;
          // targetItem.style.viewTransitionName = 'focus-photo';
          // document.startViewTransition(() => {
            this.show(Number(targetItem.dataset.index));
          //   this.showImage.style.viewTransitionName = 'focus-photo';
          //   targetItem.style.viewTransitionName = '';
          // })
        })
      }

      /** 监听显示状态 */
      this.addEventListener('toggle', (e: any) => {
        if (e.newState === 'open') {
          this.popoverOpen = true;
          document.body.style.overflow = 'hidden';
        }
        if (e.newState === 'closed') {
          this.popoverOpen = false;
          document.body.style.overflow = 'auto';
        }
      });

      /** 监听容器大小发生改变 */
      this.resizeObserver = new ResizeObserver(() => {
        if (!this.popoverOpen) return;
        this.updateScrollY();
        this.update();
      });

      this.resizeObserver.observe(this.previewWrapper);

      /** 监听事件 */
      document.addEventListener('keyup', this.handleKeyUpSelf);
      document.addEventListener('wheel', this.handleScrollSelf);
    }

    disconnectedCallback () {
      this.resizeObserver?.disconnect();
      document.removeEventListener('keyup', this.handleKeyUpSelf);
      document.removeEventListener('wheel', this.handleScrollSelf);
    }
  }

  customElements.define('scroll-preview', ScrollPreview);
</script>